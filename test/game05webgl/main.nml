/**
 * main.nml
 * demo: http://jsdo.it/h_sakurai/ofqW
 */

Html module = Dom_html

width  = 465.0
height = 465.0
pi = 4.0 *. atan(1.0)

normalize(v) = {
  v +. 2.0 *. pi *. (
    if (v >   pi) -1. else
    if (v < -.pi) 1. else 0.
  )
}

error(f) = Printf.ksprintf {|s => Firebug.console##error(Js.string(s)); failwith (s)} (f)
debug(f) = Printf.ksprintf {|s => Firebug.console##log(Js.string(s))} (f)
alert(f) = Printf.ksprintf {|s => Dom_html.window##alert(Js.string(s)); failwith (s)} (f)

canvas = {
  canvas = Html.createCanvas(Html.window##document)
  canvas##width <- int_of_float(width)
  canvas##height <- int_of_float(height)
  canvas
}

gl = Js.Opt.get(WebGL.getContext(canvas)){|()=> alert("can't init webgl context")}

load_shader(shader text) = {

  gl##shaderSource(shader,text)
  gl##compileShader(shader)
  _ = gl##getShaderParameter(shader, gl##_COMPILE_STATUS_)
  ()
}

createProgram(vs fs) = {
  vertexShader = gl##createShader(gl##_VERTEX_SHADER_)
  fragmentShader = gl##createShader(gl##_FRAGMENT_SHADER_)
  
  load_shader (vertexShader Js.string(vs))
  load_shader (fragmentShader Js.string(fs))
  
  prog = gl##createProgram()
  gl##attachShader(prog,vertexShader)
  gl##attachShader(prog,fragmentShader)
  gl##linkProgram(prog)
  _ = gl##getProgramParameter(prog, gl##_LINK_STATUS_)
  gl##useProgram(prog)
  prog
}

colorLocation = {

  vs = "attribute vec2 a_position;
    uniform vec2 u_resolution;
    void main() {
       // convert the rectangle from pixels to 0.0 to 1.0
       vec2 zeroToOne = a_position / u_resolution;
       // convert from 0->1 to 0->2
       vec2 zeroToTwo = zeroToOne * 2.0;
       // convert from 0->2 to -1->+1 (clipspace)
       vec2 clipSpace = zeroToTwo - 1.0;
       gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);
    }"

  fs =
    "precision mediump float;uniform vec4 u_color;void main() {gl_FragColor = u_color;}"

  prog = createProgram(vs fs)

  resolutionLocation = gl##getUniformLocation(prog, Js.string("u_resolution"))

  gl##uniform2f(resolutionLocation, width, height)
  gl##bindBuffer(gl##_ARRAY_BUFFER_, gl##createBuffer())

  positionLocation = gl##getAttribLocation(prog, Js.string("a_position"))
  gl##enableVertexAttribArray(positionLocation)
  gl##vertexAttribPointer(positionLocation, 2, gl##_FLOAT, Js._false, 0, 0)

  gl##getUniformLocation(prog, Js.string("u_color"))
}

float32array(a) = {
  array = jsnew Typed_array.float32Array(Array.length(a))
  Array.iteri{| i v => Typed_array.set(array i v)}(a)
  array
}

grect((x1, y1); (x2, y2)) = {

  recfa = float32array([|
    x1; y1;
    x2; y1;
    x1; y2;
    x1; y2;
    x2; y1;
    x2; y2;
  ])
  gl##bufferData(gl##_ARRAY_BUFFER_, recfa, gl##_STATIC_DRAW_)
  gl##drawArrays(gl##_TRIANGLES, 0, 6)
}

gcolor(r,g,b) = {
  gl##uniform4f(colorLocation, r, g, b, 1.)
  ()
}

Key module {

  _up    = &false
  _down  = &false
  _left  = &false
  _right = &false
  _z     = &false

  up()    = *_up
  down()  = *_down
  left()  = *_left
  right() = *_right
  z()     = *_z

  setKey(keyCode v) = {

    keyCode match {
    | 37 => _left := v
    | 38 => _up := v
    | 39 => _right := v
    | 40 => _down := v
    | 90 => _z := v
    | _ => ()
    }
  }

  keydown(ev) = {
    keyCode = ev##keyCode
    // Html.window##alert(Js.string("code" ~ string_of_int(keyCode)))
    setKey(keyCode true)
    Js._false
  }

  keyup(ev) = {
    keyCode = ev##keyCode
    setKey(keyCode false)
    Js._false
  }
  init() = {

    Html.window##onkeyup <- Html.handler(keyup);
    Html.window##onkeydown <- Html.handler(keydown)
  }
}

Shots module {
  shot type {x:float; y:float; enable:ref[bool]}

  shots:ref[list[shot]] = & []

  cnt = & 0

  add(x; y) = {
    if(*cnt < 16) {
      shots := {:x=x; y=y; enable= &true}:: *shots
    }
  }

  move() = {
    cnt := 0
    shots := *shots |> List.map {
        | {:x y enable} =>
          ++cnt
          {:x=x; y=y -. 30.0; enable=enable}
      } |> List.filter {
        | {:y enable={:contents = b}} =>
          b && y > 0.
      }
  }

  draw() = {
    gcolor(
      0.5,
      0.8+.Random.float(0.2),
      0.8+.Random.float(0.2)
    )
    *shots|>List.iter{
      | {:x y} =>
        grect(
          x -. 1.5, y -. 6.5
          x +. 3.0, y +. 4.0
        )
    }
  }

  checkColligion1(bx by r ls) = {
    !List.exists{|{:x y}=>
      (x -. r < bx && bx < x +. r) &&
      (y -. r < by && by < y +. r)
    }(ls)
  }

  checkColligion(x y r) = {
    checkColligion1(x y r)(*shots)
  }
}

Ship module {
  rsize = 25.0
  x = & width  /. 2.0
  y = & height -. rsize *. 2.0
  speed = 5.0

  move() = {

    m = 5
    m = if(Key.left())  m - 1 else m
    m = if(Key.right()) m + 1 else m
    m = if(Key.up())    m - 3 else m
    m = if(Key.down())  m + 3 else m
    speed = m match {
      | 1;| 3;| 7;| 9 => speed /. 1.4
      | _             => speed
    }
    nx,ny = m match {
      | 1 => *x -. speed, *y -. speed
      | 2 => *x         , *y -. speed
      | 3 => *x +. speed, *y -. speed
      | 4 => *x -. speed, *y
      | 5 => *x         , *y
      | 6 => *x +. speed, *y
      | 7 => *x -. speed, *y +. speed
      | 8 => *x         , *y +. speed
      | 9 => *x +. speed, *y +. speed
      | _ => *x         , *y
    }

    x := min(max(nx; rsize /. 2.); width  -. rsize /. 2.)
    y := min(max(ny; rsize /. 2.); height -. rsize /. 2.)

    Shots.move()
    if (Key.z()) Shots.add(*x; *y -. rsize /. 2.)
  }

  draw() = {
    gcolor(1.0, 0.0, 0.0)
    r = rsize /. 6.
    r2 = rsize /. 4.
    grect(
      *x -. r, *y -. r -. r2
      *x +. r, *y +. r -. r
    )
    grect(
      *x -. r -.r2, *y -. r +. r2
      *x +. r -.r2, *y +. r +. r2
    )
    grect(
      *x -. r +.r2, *y -. r +. r2
      *x +. r +.r2, *y +. r +. r2
    )
    Shots.draw()
  }

  checkColligion(r _x _y) = {
    (_x -. r < *x && *x < _x +. r) &&
    (_y -. r < *y && *y < _y +. r)
  }
}

BG module {

  stars:ref[list[(float,float,float)]] = & []

  init() = {

    def createList(i ls f) = {
      i match {
        | -1 => ls
        | i  => createList(i-1 f(i)::ls f) 
      }
    }

    stars := createList(200; []) {
      | i =>
        x = Random.float(width)
        y = Random.float(height)
        speed = Random.float(3.)+.2.0
        (x,y,speed)
    }
  }

  move() = {
    stars := *stars |> List.map{
      | (x,y,speed) =>
        x = x -. (*Ship.x -. width /. 2.) *. 0.005 *. speed 
        x = if (x < 0.   ) x +. width else x
        x = if (x > width) x -. width else x
        speed2 = speed +. (height -. *Ship.y) *. 0.03
        y = y +. speed2
        if (y > height)
          (Random.float(width), 0., Random.float(3.)+.2.)
        else
          (x, y, speed)
    }
  }

  draw() = {
    *stars |> List.iter{
      | (x,y,s) =>
        gcolor(
          Random.float(0.5)+.0.5, 
          Random.float(0.5)+.0.5, 
          Random.float(0.5)+.0.5
        )

        s = s +. (height -. *Ship.y) *. 0.06

        grect(
          x, y
          x +. 1.5, y +. 1.0 +. s 
        )
    }
  }
}

Particles module {

  particle type {x:float; y:float; dir:float; speed:float; size:float;color:(float,float,float)}

  particles:ref[list[particle]] = & []

  cnt = & 0

  add(#color=(100.0,0.6,0.2);#speed=0.0; x; y n) = {
    for(i <- 0 to n) 
      if(*cnt < 28000) {
        particles := {: x=x
          y=y
          dir= Random.float(pi*.2.);
          speed=if(speed>0.0)speed else Random.float(2.0);
          size=Random.float(15.1)+.2.
          color=color

          }:: *particles;
      }
  }
  add2(x y) = {
    add(color=(0.2,0.6,100.0);speed=10.0;x y 300)
  }
  add1(x y) = {
    add(x y 50)
  }
  move() = {
    cnt := 0
    particles := *particles |> List.map {
        | {:x y dir speed size color} =>
          ++cnt
          // dirの方向に移動
          {:x = x +. speed *. cos(dir) -. speed *. sin(dir)
            y = y +. speed *. sin(dir) +. speed *. cos(dir)
            dir=dir; speed=speed; size = size -. 0.5
            color=color
          }
      } |> List.filter {
        | {:x y size} =>
          size > 0. && y > 0. && y < height && x > 0. && x < height
      }
  }

  draw() = {
    *particles|>List.iter{
      | {:x y size color=(r,g,b)} =>
        gcolor(
          (r+.Random.float(0.2))*. (size *. 0.75) /. 5.,
          (g+.Random.float(0.2))*. (size *. 0.75) /. 5.,
          (b+.Random.float(0.2))*. (size *. 0.75) /. 5.
        )

        grect(
          x -. size, y -. size
          x +. size, y +. size
        )
    }
  }
}

Bullets module {
  bullet type {x:float; y:float; rad:float; speed:float; enable:ref[bool]}

  bullets:ref[list[bullet]] = & []

  cnt = & 0

  add(x; y; rad; speed) = {
    if(*cnt < 20) {
      bullets := {:x=x; y=y; enable= &true; rad=rad; speed=speed}:: *bullets
    }
  }

  move() = {
    cnt := 0
    bullets := *bullets |> List.map {
        | {:x y rad speed enable} =>
          ++cnt

          c = Ship.checkColligion(1.2 x y);
          if(c) { Particles.add2(x; y) };

          e = {:x=x +. cos(rad) *. speed;
            y=y +. sin(rad) *. speed;
            enable = &(*enable && !c);
            speed = speed;
            rad = rad
          }
          e
      } |> List.filter {
        | {:x y enable={:contents = b}} =>
          b && y > 0. && y < height && x > 0. && x < height
      }
  }

  draw() = {
    gcolor(
      Random.float(0.1)+.0.8, 
      Random.float(0.1)+.0.2, 
      Random.float(0.1)+.0.8
    )
    *bullets|>List.iter{
      | {:x y} =>
        r = 5.0
        grect(
          x -. r, y -. r
          x +. r, y +. r
        )
    }
  }
}

Enemies module {
  enemy class(x:float y:float enable:bool) {
    + x = x
    + y = y
    # enable = enable
    + enable = enable
    + set_enable(e) = enable <- e
    + move = {
      s = 2.0 +. (height -. *Ship.y) *. 0.06
      x = x -. (*Ship.x -. width /. 2.) *. 0.005 *. s

      if(Random.float(1.0)<0.01) {
        rad2 = atan2((*Ship.y)-.y; *Ship.x -.x)
        Bullets.add(x y rad2 3.0)
      }

      new enemy(x; y +.s; enable && y < height)
    }
    + draw = {
      gcolor(
        Random.float(0.1)+.0.8, 
        Random.float(0.1)+.0.8, 
        Random.float(0.1)+.0.2
      )
      r = 24.0
      grect(
        x -. r, y -. r
        x +. r, y +. r
      )
    }
  }

  enemy2 class(x:float y:float enable:bool) {
    + x = x
    + y = y
    + z = 1
    # enable = enable
    + enable = enable
    + set_enable(e) = enable <- e
    + move = {

      s = 5.0 +. (height -. *Ship.y) *. 0.06
      x = x -. (*Ship.x -. width /. 2.) *. 0.005 *. s
      y = y +.s

      c = Ship.checkColligion(5.0 x y)
      if(c) { Particles.add2(x; y) }

      new enemy2(x; y; enable && y < height && !c)
    }
    + draw = {
      gcolor(
        Random.float(0.1)+.0.5, 
        Random.float(0.1)+.0.5, 
        Random.float(0.1)+.0.9
      )
      r = 8.0
      grect(
        x -. r, y -. r
        x +. r, y +. r
      )
    }
  }

  enemy3 class(x:float y:float enable:bool) {
    + x = x
    + y = y
    # enable = enable
    + enable = enable
    + set_enable(e) = enable <- e
    # cnt = Random.float(pi *. 2.0)
    + set_cnt(z1) = cnt <- z1
    + move = {

      s = 5.0 +. (height -. *Ship.y) *. 0.06
      x = x -. (*Ship.x -. width /. 2.) *. 0.005 *. s +. sin(cnt) *. 10.0
      y = y +.s
      c = Ship.checkColligion(5.0 x y)
      if(c) { Particles.add2(x; y) }
      e = new enemy3(x; y; enable && y < height && !c)
      e->set_cnt(cnt +. 0.1)
      e
    }
    + draw = {
      gcolor(
        Random.float(0.1)+.0.9, 
        Random.float(0.1)+.0.5, 
        Random.float(0.1)+.0.5
      )
      r = 8.0
      grect(
        x -. r, y -. r
        x +. r, y +. r
      )
    }
  }

  enemy4 class(x:float y:float enable:bool) {
    + x = x
    + y = y
    # enable = enable
    + enable = enable
    + set_enable(e) = enable <- e
    # rad = 0.0
    + rad = rad
    + set_rad(z1) = rad <- z1
    + move = {
      speed = 6.0
      r = 0.15
      rad2 = atan2(*Ship.y-.y; *Ship.x-.x)
      rad = if(normalize(rad-.rad2)<0.) rad +. r else rad -. r
      rad = normalize(rad)
      x = x +. cos(rad)*.speed
      y = y +. sin(rad)*.speed

      // s = 5.0 +. (height -. *Ship.y) *. 0.06
      // x = x -. (*Ship.x -. width /. 2.) *. 0.005 *. s
      c = Ship.checkColligion(5.0 x y)
      if(c) { Particles.add2(x; y) }

      e = new enemy4(x; y; enable && y < height && !c)
      e->set_rad(rad)
      e
    }


    + draw = {
      gcolor(
        Random.float(0.1)+.0.5, 
        Random.float(0.1)+.0.5, 
        Random.float(0.1)+.0.5
      )
      r = 8.0
      grect(
        x -. r, y -. r
        x +. r, y +. r
      )
    }
  }

  enemies:ref[list[enemy]] = & []

  count = &0
  add(enm; x; y) = {
    if(*count < 20) {
      enemies := enm(x; y; true) :: *enemies
    }
  }

  move() = {
    if(Random.float(1.0) < 0.15) {

      es = [
        new enemy;
        {|x y b=>new enemy2(x y b) :> enemy};
        {|x y b=>new enemy3(x y b) :> enemy};
        {|x y b=>new enemy4(x y b) :> enemy};
      ]

      enm = List.nth(es Random.int(List.length(es)))
      add(enm; Random.float(width*.2.0)-.width/. 2.; -10.0)

    }

    count := 0
    enemies := *enemies |> List.map {
      | e =>
        ++count
        e->move
    } |> List.filter {
      | e =>
        if (Shots.checkColligion(e->x e->y 16.0))
          e->enable
        else {
          Particles.add1(e->x e->y)
          false
        }
    }
  }

  draw() = {

    *enemies |> List.iter{| e => e->draw }
  }
}

Game module {

  draw() = {
    gcolor(0.,0.,0.)
    grect(0., 0.; width, height)
    BG.draw()
    Enemies.draw()
    Particles.draw()
    Ship.draw()
    Bullets.draw()
  }

  loop() = {

    BG.move()
    Particles.move()
    Ship.move()
    Bullets.move()
    Enemies.move()
  }
  init() = {
    Random.init(int_of_float(Sys.time()*.10000.0))
    Key.init()
    BG.init()
  }
}



GameLib module {

  def loop ()= {
    Game.loop()
    Game.draw()
    ignore(Html.window##setTimeout(Js.wrap_callback {|()=> loop()}, 15.))
  }


  start(_) = {
    Dom.appendChild(Html.window##document##body canvas)
    Game.init()
    loop()
    Js._false
  }
  _ = {
    Html.window##onload <- Html.handler(start)
  }
}

