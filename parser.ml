type token =
  | INT of (int)
  | ID of (string)
  | SUB
  | ADD
  | OR
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | PRINT
  | EOF
  | COLON
  | COMMA
  | COLONASSIGN
  | REFASSIGN
  | ASSIGN
  | RETURN
  | OPEN of (string)
  | STRING of (string)
  | STRUCT
  | THIS
  | DOT
  | IF
  | ELSE
  | IMPLEMENT
  | RIMPLEMENT
  | TRAIT
  | ARROW
  | MEMBER
  | FARROW
  | LT
  | GT
  | LE
  | GE
  | EQ
  | HAT
  | MUL
  | AMP
  | DIV
  | CAST
  | NEW
  | AT
  | DEF
  | CASE
  | MATCH
  | TYPE
  | ADDLIST

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast

let e2t = function
| EVar(e) -> TEmpty
| ELet(_,t,EEmpty) -> t
| EUnit -> TUnit
| _ -> assert false

let e2id = function
| EVar(i) -> i
| ELet(i,t,EEmpty) -> i
| _ -> assert false

let e2e = function
| ELet(e,_,EEmpty) -> EVar(e)
| ELet(e,_,e2) -> assert false
| e -> e

# 75 "parser.ml"
let yytransl_const = [|
  259 (* SUB *);
  260 (* ADD *);
  261 (* OR *);
  262 (* SEMICOLON *);
  263 (* LPAREN *);
  264 (* RPAREN *);
  265 (* LBRACE *);
  266 (* RBRACE *);
  267 (* LBRACK *);
  268 (* RBRACK *);
  269 (* PRINT *);
    0 (* EOF *);
  270 (* COLON *);
  271 (* COMMA *);
  272 (* COLONASSIGN *);
  273 (* REFASSIGN *);
  274 (* ASSIGN *);
  275 (* RETURN *);
  278 (* STRUCT *);
  279 (* THIS *);
  280 (* DOT *);
  281 (* IF *);
  282 (* ELSE *);
  283 (* IMPLEMENT *);
  284 (* RIMPLEMENT *);
  285 (* TRAIT *);
  286 (* ARROW *);
  287 (* MEMBER *);
  288 (* FARROW *);
  289 (* LT *);
  290 (* GT *);
  291 (* LE *);
  292 (* GE *);
  293 (* EQ *);
  294 (* HAT *);
  295 (* MUL *);
  296 (* AMP *);
  297 (* DIV *);
  298 (* CAST *);
  299 (* NEW *);
  300 (* AT *);
  301 (* DEF *);
  302 (* CASE *);
  303 (* MATCH *);
  304 (* TYPE *);
  305 (* ADDLIST *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* ID *);
  276 (* OPEN *);
  277 (* STRING *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\004\000\004\000\005\000\005\000\007\000\007\000\008\000\008\000\
\009\000\009\000\010\000\010\000\011\000\011\000\012\000\012\000\
\013\000\013\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\015\000\014\000\014\000\016\000\
\016\000\016\000\016\000\017\000\017\000\001\000\001\000\000\000"

let yylen = "\002\000\
\001\000\003\000\004\000\004\000\003\000\002\000\001\000\002\000\
\001\000\003\000\001\000\002\000\001\000\002\000\003\000\004\000\
\001\000\002\000\003\000\001\000\001\000\002\000\002\000\001\000\
\001\000\003\000\005\000\004\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\006\000\007\000\
\005\000\003\000\004\000\003\000\002\000\003\000\002\000\003\000\
\004\000\004\000\005\000\004\000\003\000\004\000\004\000\003\000\
\003\000\003\000\005\000\003\000\003\000\001\000\001\000\001\000\
\004\000\004\000\006\000\003\000\003\000\001\000\003\000\001\000\
\003\000\004\000\001\000\001\000\002\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\087\000\070\000\000\000\000\000\000\000\000\000\
\000\000\083\000\072\000\000\000\000\000\000\000\000\000\088\000\
\000\000\000\000\086\000\000\000\000\000\000\000\000\000\000\000\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\085\000\000\000\
\000\000\000\000\000\000\000\000\056\000\000\000\000\000\000\000\
\000\000\000\000\000\000\014\000\012\000\052\000\000\000\050\000\
\054\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\000\000\000\000\000\000\000\000\000\061\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\057\000\051\000\000\000\077\000\
\000\000\000\000\000\000\000\000\063\000\000\000\060\000\058\000\
\062\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\027\000\000\000\019\000\
\079\000\000\000\000\000\059\000\000\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\
\010\000\000\000\008\000\003\000\004\000\047\000\016\000\000\000\
\000\000"

let yydgoto = "\002\000\
\016\000\139\000\160\000\140\000\029\000\030\000\073\000\119\000\
\120\000\071\000\072\000\116\000\117\000\074\000\075\000\018\000\
\019\000"

let yysindex = "\011\000\
\189\006\000\000\000\000\000\000\243\254\154\007\131\004\210\006\
\045\007\000\000\000\000\251\254\154\007\154\007\171\007\000\000\
\029\006\058\007\000\000\154\007\016\255\249\254\206\007\155\004\
\000\000\149\255\029\255\154\007\154\007\196\255\006\255\069\255\
\000\000\068\255\154\007\192\006\029\006\017\255\068\006\154\007\
\154\007\154\007\085\007\027\003\106\007\114\255\154\007\154\007\
\154\007\154\007\154\007\154\007\154\007\154\007\154\007\154\007\
\154\007\154\007\154\007\154\007\084\255\154\007\000\000\029\006\
\098\255\115\255\154\007\059\255\000\000\105\255\029\255\117\255\
\099\255\120\255\095\255\000\000\000\000\000\000\154\007\000\000\
\000\000\207\005\154\007\114\255\154\007\155\004\155\004\029\006\
\000\000\135\255\154\007\010\255\134\255\000\000\133\255\000\000\
\168\255\144\255\101\255\029\006\029\006\029\006\023\255\067\255\
\129\007\129\007\129\007\129\007\129\007\004\007\192\006\192\006\
\103\255\101\255\114\255\156\255\000\000\155\255\115\255\167\255\
\029\006\154\007\154\007\000\000\000\000\000\000\154\007\000\000\
\154\007\029\006\161\255\029\006\000\000\171\255\000\000\000\000\
\000\000\000\000\081\255\170\255\114\255\114\255\154\007\114\255\
\154\007\186\255\098\255\114\255\000\000\000\000\029\006\000\000\
\000\000\246\005\154\007\000\000\114\255\000\000\092\255\181\255\
\180\255\029\006\186\255\184\255\000\000\079\255\154\007\029\006\
\000\000\168\255\000\000\000\000\000\000\000\000\000\000\029\006\
\240\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\141\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\234\002\204\000\000\000\000\000\000\000\001\000\000\000\085\002\
\000\000\000\000\000\000\000\000\252\254\236\006\000\000\000\000\
\000\000\000\000\000\000\190\001\078\004\107\006\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\210\003\
\000\000\000\000\000\000\107\006\000\000\013\255\199\255\000\000\
\000\000\000\000\205\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\134\002\183\002\105\004\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\244\000\000\004\147\004\189\004\216\004\043\001\092\001\
\232\002\025\003\074\003\116\003\158\003\207\003\239\001\032\002\
\000\000\047\004\097\000\050\000\000\000\000\000\207\255\000\000\
\243\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\049\004\146\006\014\005\000\000\000\000\000\000\000\000\
\000\000\000\000\065\255\000\000\000\000\000\000\000\000\000\000\
\000\000\146\000\000\000\000\000\000\000\000\000\041\005\000\000\
\000\000\163\005\000\000\000\000\000\000\000\000\200\255\000\000\
\000\000\082\005\195\000\000\000\000\000\118\255\000\000\109\005\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\005\
\200\255"

let yygindex = "\000\000\
\000\000\210\255\198\255\128\255\083\000\004\000\039\000\000\000\
\099\000\000\000\148\000\000\000\074\000\178\255\255\255\000\000\
\205\000"

let yytablesize = 2299
let yytable = "\098\000\
\071\000\035\000\020\000\013\000\017\000\013\000\032\000\013\000\
\067\000\024\000\026\000\001\000\134\000\161\000\020\000\078\000\
\036\000\037\000\039\000\135\000\065\000\017\000\020\000\064\000\
\066\000\013\000\039\000\042\000\169\000\043\000\070\000\044\000\
\083\000\045\000\021\000\079\000\046\000\131\000\082\000\079\000\
\021\000\013\000\093\000\086\000\087\000\088\000\031\000\034\000\
\153\000\025\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\021\000\114\000\164\000\076\000\146\000\061\000\121\000\042\000\
\009\000\043\000\122\000\044\000\009\000\045\000\080\000\081\000\
\046\000\090\000\092\000\095\000\175\000\141\000\130\000\141\000\
\132\000\142\000\051\000\142\000\113\000\096\000\159\000\157\000\
\024\000\163\000\170\000\115\000\171\000\166\000\142\000\040\000\
\041\000\042\000\021\000\043\000\144\000\044\000\144\000\045\000\
\159\000\061\000\046\000\096\000\118\000\128\000\171\000\015\000\
\097\000\144\000\123\000\177\000\051\000\151\000\125\000\015\000\
\079\000\126\000\159\000\052\000\154\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\127\000\060\000\133\000\136\000\
\137\000\023\000\162\000\061\000\145\000\062\000\141\000\040\000\
\041\000\042\000\142\000\043\000\069\000\044\000\168\000\045\000\
\147\000\143\000\046\000\047\000\048\000\049\000\050\000\141\000\
\148\000\096\000\176\000\142\000\051\000\144\000\097\000\138\000\
\150\000\158\000\155\000\052\000\156\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\172\000\060\000\144\000\173\000\
\141\000\174\000\002\000\061\000\142\000\062\000\040\000\041\000\
\042\000\077\000\043\000\084\000\044\000\152\000\045\000\007\000\
\021\000\046\000\047\000\048\000\049\000\050\000\078\000\144\000\
\017\000\149\000\124\000\051\000\165\000\000\000\063\000\000\000\
\000\000\000\000\052\000\000\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\000\000\060\000\000\000\000\000\000\000\
\000\000\096\000\061\000\069\000\062\000\000\000\170\000\000\000\
\000\000\000\000\142\000\000\000\000\000\000\000\157\000\000\000\
\000\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\144\000\071\000\071\000\
\000\000\071\000\071\000\000\000\071\000\071\000\000\000\000\000\
\071\000\071\000\071\000\000\000\000\000\000\000\071\000\071\000\
\000\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\036\000\000\000\000\000\071\000\071\000\071\000\
\000\000\071\000\025\000\025\000\025\000\025\000\000\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\000\000\025\000\
\025\000\025\000\025\000\025\000\000\000\025\000\025\000\000\000\
\000\000\025\000\025\000\025\000\000\000\000\000\000\000\025\000\
\025\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\076\000\000\000\000\000\025\000\025\000\
\025\000\024\000\025\000\024\000\024\000\024\000\024\000\000\000\
\024\000\024\000\024\000\024\000\024\000\000\000\024\000\024\000\
\024\000\024\000\024\000\000\000\024\000\024\000\000\000\000\000\
\024\000\024\000\024\000\000\000\000\000\000\000\024\000\024\000\
\000\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\000\000\000\000\071\000\024\000\024\000\024\000\
\000\000\024\000\023\000\023\000\023\000\023\000\023\000\023\000\
\000\000\023\000\023\000\023\000\000\000\023\000\000\000\023\000\
\023\000\023\000\023\000\023\000\000\000\023\000\023\000\000\000\
\000\000\023\000\023\000\023\000\000\000\000\000\000\000\000\000\
\023\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\000\000\031\000\023\000\023\000\
\023\000\000\000\023\000\002\000\002\000\002\000\002\000\002\000\
\002\000\000\000\002\000\002\000\002\000\000\000\002\000\000\000\
\002\000\002\000\002\000\002\000\002\000\000\000\002\000\002\000\
\000\000\000\000\002\000\002\000\002\000\000\000\000\000\000\000\
\000\000\002\000\000\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\000\000\000\000\034\000\002\000\
\002\000\002\000\000\000\002\000\069\000\069\000\069\000\069\000\
\069\000\069\000\000\000\069\000\069\000\069\000\000\000\069\000\
\000\000\069\000\069\000\069\000\069\000\000\000\000\000\069\000\
\069\000\000\000\000\000\069\000\069\000\069\000\000\000\000\000\
\000\000\000\000\069\000\000\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\000\000\000\000\035\000\
\069\000\069\000\069\000\000\000\069\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\036\000\036\000\036\000\000\000\
\036\000\000\000\036\000\000\000\036\000\000\000\036\000\000\000\
\000\000\036\000\036\000\036\000\036\000\000\000\036\000\036\000\
\000\000\000\000\036\000\036\000\036\000\000\000\000\000\000\000\
\036\000\036\000\000\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\029\000\000\000\000\000\036\000\
\036\000\000\000\000\000\036\000\076\000\076\000\076\000\076\000\
\000\000\076\000\000\000\076\000\000\000\076\000\000\000\076\000\
\000\000\000\000\076\000\076\000\076\000\076\000\000\000\076\000\
\076\000\000\000\000\000\000\000\076\000\076\000\000\000\000\000\
\000\000\076\000\076\000\000\000\076\000\076\000\076\000\076\000\
\076\000\076\000\076\000\076\000\076\000\033\000\000\000\000\000\
\076\000\076\000\000\000\000\000\076\000\071\000\071\000\071\000\
\071\000\071\000\000\000\071\000\000\000\071\000\000\000\071\000\
\000\000\000\000\071\000\071\000\000\000\071\000\071\000\000\000\
\071\000\071\000\000\000\000\000\071\000\071\000\000\000\000\000\
\000\000\000\000\000\000\071\000\000\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\032\000\000\000\
\000\000\071\000\000\000\071\000\000\000\071\000\031\000\031\000\
\031\000\031\000\000\000\031\000\000\000\031\000\000\000\031\000\
\000\000\031\000\000\000\000\000\031\000\031\000\031\000\031\000\
\000\000\031\000\031\000\000\000\000\000\000\000\031\000\031\000\
\000\000\000\000\000\000\031\000\000\000\000\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\037\000\
\000\000\080\000\031\000\031\000\000\000\000\000\031\000\034\000\
\034\000\034\000\034\000\000\000\034\000\000\000\034\000\000\000\
\034\000\000\000\034\000\000\000\000\000\034\000\034\000\034\000\
\034\000\000\000\034\000\034\000\000\000\000\000\000\000\034\000\
\034\000\000\000\000\000\000\000\034\000\000\000\000\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\038\000\000\000\000\000\034\000\034\000\000\000\000\000\034\000\
\035\000\035\000\035\000\035\000\000\000\035\000\000\000\035\000\
\000\000\035\000\000\000\035\000\000\000\000\000\035\000\035\000\
\035\000\035\000\000\000\035\000\035\000\000\000\000\000\000\000\
\035\000\035\000\000\000\000\000\000\000\035\000\000\000\000\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\039\000\000\000\000\000\035\000\035\000\000\000\000\000\
\035\000\000\000\000\000\000\000\000\000\029\000\029\000\029\000\
\029\000\000\000\029\000\000\000\029\000\000\000\029\000\000\000\
\029\000\000\000\000\000\029\000\029\000\029\000\029\000\000\000\
\029\000\029\000\000\000\000\000\000\000\029\000\029\000\000\000\
\000\000\000\000\029\000\040\000\000\000\029\000\029\000\029\000\
\029\000\029\000\029\000\000\000\029\000\000\000\000\000\000\000\
\000\000\029\000\029\000\000\000\000\000\029\000\033\000\033\000\
\033\000\033\000\000\000\033\000\000\000\033\000\000\000\033\000\
\000\000\033\000\000\000\000\000\033\000\033\000\033\000\033\000\
\000\000\033\000\033\000\000\000\000\000\041\000\033\000\033\000\
\000\000\000\000\000\000\033\000\000\000\000\000\033\000\033\000\
\033\000\033\000\033\000\033\000\000\000\033\000\000\000\000\000\
\000\000\000\000\033\000\033\000\000\000\000\000\033\000\032\000\
\032\000\032\000\032\000\000\000\032\000\000\000\032\000\000\000\
\032\000\000\000\032\000\000\000\000\000\032\000\032\000\032\000\
\032\000\000\000\032\000\032\000\000\000\000\000\043\000\032\000\
\032\000\065\000\000\000\000\000\032\000\000\000\000\000\032\000\
\032\000\032\000\032\000\032\000\032\000\000\000\032\000\000\000\
\000\000\000\000\000\000\032\000\032\000\000\000\000\000\032\000\
\037\000\037\000\080\000\080\000\000\000\037\000\000\000\037\000\
\000\000\037\000\000\000\037\000\000\000\000\000\037\000\037\000\
\037\000\037\000\000\000\037\000\037\000\080\000\080\000\044\000\
\037\000\037\000\080\000\000\000\000\000\037\000\000\000\000\000\
\037\000\037\000\037\000\037\000\037\000\037\000\000\000\037\000\
\000\000\080\000\000\000\000\000\037\000\037\000\080\000\000\000\
\037\000\038\000\038\000\004\000\022\000\006\000\038\000\000\000\
\038\000\007\000\038\000\008\000\038\000\009\000\000\000\038\000\
\038\000\038\000\038\000\000\000\038\000\038\000\045\000\011\000\
\073\000\038\000\038\000\012\000\000\000\000\000\038\000\000\000\
\000\000\038\000\038\000\038\000\038\000\038\000\038\000\000\000\
\038\000\013\000\014\000\000\000\000\000\038\000\038\000\023\000\
\091\000\038\000\039\000\039\000\000\000\030\000\000\000\039\000\
\000\000\039\000\000\000\039\000\000\000\039\000\000\000\000\000\
\039\000\039\000\039\000\039\000\000\000\039\000\039\000\000\000\
\000\000\000\000\039\000\039\000\000\000\000\000\000\000\039\000\
\042\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
\000\000\039\000\000\000\000\000\040\000\040\000\039\000\039\000\
\000\000\040\000\039\000\040\000\000\000\040\000\000\000\040\000\
\000\000\000\000\040\000\040\000\040\000\040\000\000\000\040\000\
\040\000\000\000\000\000\000\000\040\000\040\000\000\000\000\000\
\000\000\040\000\066\000\000\000\040\000\040\000\040\000\040\000\
\040\000\040\000\000\000\040\000\000\000\000\000\041\000\041\000\
\040\000\040\000\000\000\041\000\040\000\041\000\000\000\041\000\
\000\000\041\000\000\000\000\000\041\000\041\000\041\000\041\000\
\000\000\041\000\041\000\000\000\000\000\000\000\041\000\041\000\
\000\000\000\000\000\000\041\000\068\000\000\000\041\000\041\000\
\041\000\041\000\041\000\041\000\000\000\041\000\000\000\000\000\
\000\000\000\000\041\000\041\000\000\000\000\000\041\000\043\000\
\043\000\000\000\065\000\065\000\043\000\000\000\043\000\046\000\
\043\000\000\000\043\000\000\000\000\000\043\000\043\000\043\000\
\043\000\000\000\043\000\043\000\000\000\065\000\065\000\043\000\
\043\000\000\000\065\000\000\000\043\000\000\000\000\000\000\000\
\000\000\000\000\065\000\000\000\043\000\000\000\043\000\000\000\
\000\000\065\000\000\000\043\000\043\000\000\000\065\000\043\000\
\044\000\044\000\000\000\000\000\000\000\044\000\000\000\044\000\
\000\000\044\000\000\000\044\000\000\000\074\000\044\000\044\000\
\044\000\044\000\000\000\044\000\044\000\000\000\000\000\000\000\
\044\000\044\000\000\000\000\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\073\000\000\000\000\000\000\000\044\000\044\000\000\000\045\000\
\045\000\073\000\073\000\000\000\045\000\000\000\045\000\000\000\
\045\000\000\000\045\000\000\000\000\000\045\000\045\000\045\000\
\045\000\000\000\045\000\045\000\073\000\073\000\000\000\045\000\
\045\000\073\000\000\000\000\000\045\000\000\000\030\000\030\000\
\000\000\067\000\000\000\030\000\000\000\030\000\045\000\030\000\
\073\000\030\000\000\000\045\000\045\000\073\000\000\000\000\000\
\000\000\030\000\030\000\000\000\000\000\000\000\030\000\030\000\
\000\000\042\000\042\000\030\000\075\000\000\000\042\000\000\000\
\042\000\000\000\042\000\000\000\042\000\030\000\000\000\000\000\
\000\000\000\000\030\000\030\000\042\000\042\000\000\000\000\000\
\000\000\042\000\042\000\004\000\022\000\006\000\042\000\048\000\
\000\000\007\000\025\000\008\000\000\000\009\000\000\000\000\000\
\042\000\000\000\000\000\066\000\066\000\042\000\042\000\011\000\
\066\000\000\000\066\000\012\000\066\000\000\000\066\000\042\000\
\000\000\043\000\049\000\044\000\000\000\045\000\066\000\066\000\
\046\000\013\000\014\000\066\000\066\000\000\000\000\000\023\000\
\066\000\000\000\051\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\066\000\000\000\000\000\068\000\068\000\066\000\
\066\000\059\000\068\000\060\000\068\000\000\000\068\000\000\000\
\068\000\061\000\000\000\000\000\000\000\000\000\000\000\000\000\
\068\000\068\000\000\000\000\000\000\000\068\000\068\000\000\000\
\046\000\046\000\068\000\000\000\000\000\046\000\000\000\046\000\
\000\000\046\000\000\000\046\000\068\000\000\000\000\000\000\000\
\000\000\068\000\068\000\046\000\046\000\000\000\000\000\000\000\
\046\000\046\000\000\000\065\000\065\000\046\000\000\000\000\000\
\065\000\000\000\065\000\000\000\065\000\000\000\065\000\046\000\
\000\000\000\000\000\000\000\000\046\000\046\000\065\000\065\000\
\000\000\000\000\000\000\065\000\065\000\000\000\074\000\074\000\
\065\000\000\000\000\000\074\000\000\000\074\000\000\000\074\000\
\000\000\074\000\065\000\000\000\000\000\000\000\000\000\065\000\
\065\000\074\000\074\000\000\000\000\000\000\000\074\000\074\000\
\000\000\073\000\073\000\074\000\000\000\000\000\073\000\000\000\
\073\000\000\000\073\000\000\000\073\000\074\000\000\000\000\000\
\000\000\000\000\074\000\074\000\073\000\073\000\000\000\000\000\
\000\000\073\000\073\000\000\000\000\000\000\000\073\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\073\000\000\000\067\000\067\000\000\000\073\000\073\000\067\000\
\000\000\067\000\000\000\067\000\000\000\067\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\067\000\067\000\000\000\
\000\000\000\000\067\000\067\000\000\000\075\000\075\000\067\000\
\000\000\000\000\075\000\000\000\075\000\000\000\075\000\000\000\
\075\000\067\000\000\000\000\000\000\000\000\000\067\000\067\000\
\075\000\075\000\000\000\000\000\000\000\075\000\075\000\000\000\
\048\000\048\000\075\000\000\000\000\000\048\000\000\000\048\000\
\000\000\048\000\000\000\048\000\075\000\000\000\000\000\000\000\
\000\000\075\000\075\000\048\000\048\000\000\000\000\000\000\000\
\048\000\048\000\000\000\049\000\049\000\048\000\000\000\000\000\
\049\000\000\000\049\000\000\000\049\000\000\000\049\000\048\000\
\000\000\000\000\000\000\000\000\048\000\048\000\049\000\049\000\
\000\000\000\000\000\000\049\000\000\000\000\000\000\000\000\000\
\049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\049\000\000\000\000\000\000\000\000\000\049\000\
\049\000\040\000\041\000\042\000\000\000\043\000\129\000\044\000\
\000\000\045\000\000\000\000\000\046\000\047\000\048\000\049\000\
\050\000\000\000\000\000\000\000\000\000\000\000\051\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\000\000\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\000\000\060\000\
\040\000\041\000\042\000\000\000\043\000\061\000\044\000\062\000\
\045\000\000\000\000\000\046\000\047\000\048\000\049\000\050\000\
\000\000\000\000\000\000\000\000\000\000\051\000\000\000\167\000\
\000\000\000\000\000\000\000\000\052\000\000\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\000\000\060\000\040\000\
\041\000\042\000\000\000\043\000\061\000\044\000\062\000\045\000\
\000\000\000\000\046\000\047\000\048\000\049\000\050\000\000\000\
\000\000\000\000\000\000\000\000\051\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\000\000\060\000\040\000\041\000\
\042\000\000\000\043\000\061\000\044\000\062\000\045\000\000\000\
\000\000\084\000\047\000\085\000\049\000\050\000\000\000\000\000\
\000\000\000\000\000\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\052\000\000\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\000\000\060\000\071\000\071\000\071\000\
\000\000\071\000\061\000\071\000\062\000\071\000\000\000\000\000\
\071\000\071\000\000\000\071\000\071\000\000\000\000\000\000\000\
\000\000\000\000\071\000\000\000\000\000\000\000\000\000\000\000\
\000\000\071\000\000\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\000\000\071\000\069\000\069\000\069\000\000\000\
\000\000\071\000\069\000\071\000\000\000\000\000\000\000\069\000\
\069\000\069\000\069\000\000\000\000\000\000\000\000\000\000\000\
\000\000\069\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\000\000\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\000\000\069\000\000\000\003\000\004\000\005\000\006\000\
\069\000\000\000\069\000\007\000\042\000\008\000\043\000\009\000\
\044\000\000\000\045\000\000\000\000\000\046\000\000\000\000\000\
\010\000\011\000\004\000\022\000\006\000\012\000\000\000\051\000\
\007\000\000\000\008\000\000\000\009\000\000\000\052\000\027\000\
\000\000\000\000\000\000\013\000\014\000\000\000\011\000\000\000\
\000\000\015\000\012\000\000\000\011\000\011\000\061\000\000\000\
\000\000\000\000\000\000\011\000\000\000\011\000\000\000\011\000\
\013\000\014\000\000\000\000\000\000\000\000\000\023\000\028\000\
\011\000\000\000\000\000\000\000\011\000\000\000\040\000\041\000\
\042\000\011\000\043\000\000\000\044\000\000\000\045\000\000\000\
\000\000\046\000\000\000\011\000\000\000\000\000\000\000\000\000\
\011\000\011\000\000\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\052\000\000\000\053\000\054\000\055\000\056\000\
\057\000\000\000\059\000\000\000\060\000\004\000\022\000\006\000\
\000\000\000\000\061\000\007\000\000\000\008\000\000\000\009\000\
\033\000\000\000\004\000\005\000\006\000\000\000\000\000\000\000\
\007\000\011\000\008\000\000\000\009\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\011\000\000\000\
\000\000\000\000\012\000\013\000\014\000\004\000\022\000\006\000\
\000\000\023\000\000\000\007\000\089\000\008\000\000\000\009\000\
\013\000\014\000\000\000\000\000\000\000\000\000\015\000\000\000\
\000\000\011\000\004\000\022\000\006\000\012\000\000\000\000\000\
\007\000\000\000\008\000\000\000\009\000\094\000\000\000\000\000\
\000\000\000\000\000\000\013\000\014\000\000\000\011\000\000\000\
\000\000\023\000\012\000\040\000\041\000\042\000\000\000\043\000\
\000\000\044\000\000\000\045\000\000\000\000\000\046\000\000\000\
\013\000\014\000\000\000\000\000\000\000\000\000\023\000\000\000\
\051\000\000\000\004\000\022\000\006\000\000\000\000\000\052\000\
\007\000\000\000\008\000\000\000\009\000\000\000\000\000\059\000\
\000\000\060\000\000\000\004\000\038\000\006\000\011\000\061\000\
\000\000\007\000\012\000\008\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\013\000\014\000\000\000\012\000\000\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\068\000\
\006\000\013\000\014\000\000\000\007\000\000\000\008\000\023\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\000\000\000\000\000\000\012\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\013\000\014\000\000\000\000\000\
\000\000\000\000\023\000"

let yycheck = "\046\000\
\000\000\007\001\016\001\008\001\001\000\010\001\008\000\012\001\
\016\001\006\000\007\000\001\000\091\000\142\000\002\001\010\001\
\013\000\014\000\015\000\010\001\005\001\018\000\010\001\020\000\
\009\001\030\001\023\000\005\001\157\000\007\001\002\001\009\001\
\016\001\011\001\048\001\030\001\014\001\084\000\035\000\030\001\
\048\001\046\001\044\000\040\000\041\000\042\000\008\000\009\000\
\127\000\000\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\048\001\062\000\145\000\029\000\115\000\047\001\067\000\005\001\
\008\001\007\001\016\001\009\001\012\001\011\001\010\001\012\001\
\014\001\043\000\044\000\045\000\006\001\007\001\083\000\007\001\
\085\000\011\001\024\001\011\001\009\001\002\001\141\000\015\001\
\000\000\144\000\007\001\002\001\159\000\148\000\011\001\003\001\
\004\001\005\001\048\001\007\001\030\001\009\001\030\001\011\001\
\159\000\047\001\014\001\002\001\002\001\079\000\177\000\002\001\
\007\001\030\001\018\001\170\000\024\001\122\000\010\001\010\001\
\030\001\010\001\177\000\031\001\129\000\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\046\001\041\001\008\001\010\001\
\012\001\000\000\143\000\047\001\046\001\049\001\007\001\003\001\
\004\001\005\001\011\001\007\001\008\001\009\001\155\000\011\001\
\005\001\018\001\014\001\015\001\016\001\017\001\018\001\007\001\
\014\001\002\001\167\000\011\001\024\001\030\001\007\001\008\001\
\010\001\008\001\018\001\031\001\010\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\008\001\041\001\030\001\012\001\
\007\001\010\001\000\000\047\001\011\001\049\001\003\001\004\001\
\005\001\006\001\007\001\000\000\009\001\123\000\011\001\008\001\
\010\001\014\001\015\001\016\001\017\001\018\001\010\001\030\001\
\010\001\119\000\071\000\024\001\147\000\255\255\018\000\255\255\
\255\255\255\255\031\001\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\255\255\041\001\255\255\255\255\255\255\
\255\255\002\001\047\001\000\000\049\001\255\255\007\001\255\255\
\255\255\255\255\011\001\255\255\255\255\255\255\015\001\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\030\001\014\001\015\001\
\255\255\017\001\018\001\255\255\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\255\255\255\255\255\255\030\001\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\000\000\255\255\255\255\045\001\046\001\047\001\
\255\255\049\001\001\001\002\001\003\001\004\001\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\255\255\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\255\255\255\255\255\255\030\001\
\031\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\000\000\255\255\255\255\045\001\046\001\
\047\001\001\001\049\001\003\001\004\001\005\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\255\255\255\255\255\255\030\001\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\255\255\255\255\000\000\045\001\046\001\047\001\
\255\255\049\001\001\001\002\001\003\001\004\001\005\001\006\001\
\255\255\008\001\009\001\010\001\255\255\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\255\255\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\255\255\255\255\255\255\255\255\
\031\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\255\255\255\255\000\000\045\001\046\001\
\047\001\255\255\049\001\001\001\002\001\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\010\001\255\255\012\001\255\255\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\021\001\
\255\255\255\255\024\001\025\001\026\001\255\255\255\255\255\255\
\255\255\031\001\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\255\255\255\255\000\000\045\001\
\046\001\047\001\255\255\049\001\001\001\002\001\003\001\004\001\
\005\001\006\001\255\255\008\001\009\001\010\001\255\255\012\001\
\255\255\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\255\255\255\255\
\255\255\255\255\031\001\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\255\255\255\255\000\000\
\045\001\046\001\047\001\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\255\255\
\006\001\255\255\008\001\255\255\010\001\255\255\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\255\255\020\001\021\001\
\255\255\255\255\024\001\025\001\026\001\255\255\255\255\255\255\
\030\001\031\001\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\000\000\255\255\255\255\045\001\
\046\001\255\255\255\255\049\001\001\001\002\001\003\001\004\001\
\255\255\006\001\255\255\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\255\255\255\255\025\001\026\001\255\255\255\255\
\255\255\030\001\031\001\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\000\000\255\255\255\255\
\045\001\046\001\255\255\255\255\049\001\001\001\002\001\003\001\
\004\001\005\001\255\255\007\001\255\255\009\001\255\255\011\001\
\255\255\255\255\014\001\015\001\255\255\017\001\018\001\255\255\
\020\001\021\001\255\255\255\255\024\001\025\001\255\255\255\255\
\255\255\255\255\255\255\031\001\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\000\000\255\255\
\255\255\045\001\255\255\047\001\255\255\049\001\001\001\002\001\
\003\001\004\001\255\255\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\255\255\020\001\021\001\255\255\255\255\255\255\025\001\026\001\
\255\255\255\255\255\255\030\001\255\255\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\000\000\
\255\255\000\000\045\001\046\001\255\255\255\255\049\001\001\001\
\002\001\003\001\004\001\255\255\006\001\255\255\008\001\255\255\
\010\001\255\255\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\255\255\020\001\021\001\255\255\255\255\255\255\025\001\
\026\001\255\255\255\255\255\255\030\001\255\255\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\000\000\255\255\255\255\045\001\046\001\255\255\255\255\049\001\
\001\001\002\001\003\001\004\001\255\255\006\001\255\255\008\001\
\255\255\010\001\255\255\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\255\255\
\025\001\026\001\255\255\255\255\255\255\030\001\255\255\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\000\000\255\255\255\255\045\001\046\001\255\255\255\255\
\049\001\255\255\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\255\255\006\001\255\255\008\001\255\255\010\001\255\255\
\012\001\255\255\255\255\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\255\255\255\255\255\255\025\001\026\001\255\255\
\255\255\255\255\030\001\000\000\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\255\255\255\255\255\255\
\255\255\045\001\046\001\255\255\255\255\049\001\001\001\002\001\
\003\001\004\001\255\255\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\255\255\020\001\021\001\255\255\255\255\000\000\025\001\026\001\
\255\255\255\255\255\255\030\001\255\255\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\255\255\040\001\255\255\255\255\
\255\255\255\255\045\001\046\001\255\255\255\255\049\001\001\001\
\002\001\003\001\004\001\255\255\006\001\255\255\008\001\255\255\
\010\001\255\255\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\255\255\020\001\021\001\255\255\255\255\000\000\025\001\
\026\001\000\000\255\255\255\255\030\001\255\255\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\255\255\040\001\255\255\
\255\255\255\255\255\255\045\001\046\001\255\255\255\255\049\001\
\001\001\002\001\001\001\002\001\255\255\006\001\255\255\008\001\
\255\255\010\001\255\255\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\020\001\021\001\000\000\
\025\001\026\001\025\001\255\255\255\255\030\001\255\255\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\255\255\040\001\
\255\255\040\001\255\255\255\255\045\001\046\001\045\001\255\255\
\049\001\001\001\002\001\001\001\002\001\003\001\006\001\255\255\
\008\001\007\001\010\001\009\001\012\001\011\001\255\255\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\000\000\021\001\
\000\000\025\001\026\001\025\001\255\255\255\255\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\255\255\
\040\001\039\001\040\001\255\255\255\255\045\001\046\001\045\001\
\046\001\049\001\001\001\002\001\255\255\000\000\255\255\006\001\
\255\255\008\001\255\255\010\001\255\255\012\001\255\255\255\255\
\015\001\016\001\017\001\018\001\255\255\020\001\021\001\255\255\
\255\255\255\255\025\001\026\001\255\255\255\255\255\255\030\001\
\000\000\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\255\255\040\001\255\255\255\255\001\001\002\001\045\001\046\001\
\255\255\006\001\049\001\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\255\255\255\255\025\001\026\001\255\255\255\255\
\255\255\030\001\000\000\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\255\255\040\001\255\255\255\255\001\001\002\001\
\045\001\046\001\255\255\006\001\049\001\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\255\255\020\001\021\001\255\255\255\255\255\255\025\001\026\001\
\255\255\255\255\255\255\030\001\000\000\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\255\255\040\001\255\255\255\255\
\255\255\255\255\045\001\046\001\255\255\255\255\049\001\001\001\
\002\001\255\255\001\001\002\001\006\001\255\255\008\001\000\000\
\010\001\255\255\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\255\255\020\001\021\001\255\255\020\001\021\001\025\001\
\026\001\255\255\025\001\255\255\030\001\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\038\001\255\255\040\001\255\255\
\255\255\040\001\255\255\045\001\046\001\255\255\045\001\049\001\
\001\001\002\001\255\255\255\255\255\255\006\001\255\255\008\001\
\255\255\010\001\255\255\012\001\255\255\000\000\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\255\255\
\025\001\026\001\255\255\255\255\255\255\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\040\001\
\000\000\255\255\255\255\255\255\045\001\046\001\255\255\001\001\
\002\001\001\001\002\001\255\255\006\001\255\255\008\001\255\255\
\010\001\255\255\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\255\255\020\001\021\001\020\001\021\001\255\255\025\001\
\026\001\025\001\255\255\255\255\030\001\255\255\001\001\002\001\
\255\255\000\000\255\255\006\001\255\255\008\001\040\001\010\001\
\040\001\012\001\255\255\045\001\046\001\045\001\255\255\255\255\
\255\255\020\001\021\001\255\255\255\255\255\255\025\001\026\001\
\255\255\001\001\002\001\030\001\000\000\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\040\001\255\255\255\255\
\255\255\255\255\045\001\046\001\020\001\021\001\255\255\255\255\
\255\255\025\001\026\001\001\001\002\001\003\001\030\001\000\000\
\255\255\007\001\008\001\009\001\255\255\011\001\255\255\255\255\
\040\001\255\255\255\255\001\001\002\001\045\001\046\001\021\001\
\006\001\255\255\008\001\025\001\010\001\255\255\012\001\005\001\
\255\255\007\001\000\000\009\001\255\255\011\001\020\001\021\001\
\014\001\039\001\040\001\025\001\026\001\255\255\255\255\045\001\
\030\001\255\255\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\040\001\255\255\255\255\001\001\002\001\045\001\
\046\001\039\001\006\001\041\001\008\001\255\255\010\001\255\255\
\012\001\047\001\255\255\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\255\255\255\255\255\255\025\001\026\001\255\255\
\001\001\002\001\030\001\255\255\255\255\006\001\255\255\008\001\
\255\255\010\001\255\255\012\001\040\001\255\255\255\255\255\255\
\255\255\045\001\046\001\020\001\021\001\255\255\255\255\255\255\
\025\001\026\001\255\255\001\001\002\001\030\001\255\255\255\255\
\006\001\255\255\008\001\255\255\010\001\255\255\012\001\040\001\
\255\255\255\255\255\255\255\255\045\001\046\001\020\001\021\001\
\255\255\255\255\255\255\025\001\026\001\255\255\001\001\002\001\
\030\001\255\255\255\255\006\001\255\255\008\001\255\255\010\001\
\255\255\012\001\040\001\255\255\255\255\255\255\255\255\045\001\
\046\001\020\001\021\001\255\255\255\255\255\255\025\001\026\001\
\255\255\001\001\002\001\030\001\255\255\255\255\006\001\255\255\
\008\001\255\255\010\001\255\255\012\001\040\001\255\255\255\255\
\255\255\255\255\045\001\046\001\020\001\021\001\255\255\255\255\
\255\255\025\001\026\001\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\040\001\255\255\001\001\002\001\255\255\045\001\046\001\006\001\
\255\255\008\001\255\255\010\001\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\021\001\255\255\
\255\255\255\255\025\001\026\001\255\255\001\001\002\001\030\001\
\255\255\255\255\006\001\255\255\008\001\255\255\010\001\255\255\
\012\001\040\001\255\255\255\255\255\255\255\255\045\001\046\001\
\020\001\021\001\255\255\255\255\255\255\025\001\026\001\255\255\
\001\001\002\001\030\001\255\255\255\255\006\001\255\255\008\001\
\255\255\010\001\255\255\012\001\040\001\255\255\255\255\255\255\
\255\255\045\001\046\001\020\001\021\001\255\255\255\255\255\255\
\025\001\026\001\255\255\001\001\002\001\030\001\255\255\255\255\
\006\001\255\255\008\001\255\255\010\001\255\255\012\001\040\001\
\255\255\255\255\255\255\255\255\045\001\046\001\020\001\021\001\
\255\255\255\255\255\255\025\001\255\255\255\255\255\255\255\255\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\255\255\255\255\255\255\255\255\045\001\
\046\001\003\001\004\001\005\001\255\255\007\001\008\001\009\001\
\255\255\011\001\255\255\255\255\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\041\001\
\003\001\004\001\005\001\255\255\007\001\047\001\009\001\049\001\
\011\001\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\255\255\255\255\024\001\255\255\026\001\
\255\255\255\255\255\255\255\255\031\001\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\255\255\041\001\003\001\
\004\001\005\001\255\255\007\001\047\001\009\001\049\001\011\001\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\255\255\255\255\031\001\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\255\255\041\001\003\001\004\001\
\005\001\255\255\007\001\047\001\009\001\049\001\011\001\255\255\
\255\255\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\255\255\041\001\003\001\004\001\005\001\
\255\255\007\001\047\001\009\001\049\001\011\001\255\255\255\255\
\014\001\015\001\255\255\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\255\255\041\001\003\001\004\001\005\001\255\255\
\255\255\047\001\009\001\049\001\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\255\255\041\001\255\255\000\001\001\001\002\001\003\001\
\047\001\255\255\049\001\007\001\005\001\009\001\007\001\011\001\
\009\001\255\255\011\001\255\255\255\255\014\001\255\255\255\255\
\020\001\021\001\001\001\002\001\003\001\025\001\255\255\024\001\
\007\001\255\255\009\001\255\255\011\001\255\255\031\001\014\001\
\255\255\255\255\255\255\039\001\040\001\255\255\021\001\255\255\
\255\255\045\001\025\001\255\255\001\001\002\001\047\001\255\255\
\255\255\255\255\255\255\008\001\255\255\010\001\255\255\012\001\
\039\001\040\001\255\255\255\255\255\255\255\255\045\001\046\001\
\021\001\255\255\255\255\255\255\025\001\255\255\003\001\004\001\
\005\001\030\001\007\001\255\255\009\001\255\255\011\001\255\255\
\255\255\014\001\255\255\040\001\255\255\255\255\255\255\255\255\
\045\001\046\001\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\255\255\033\001\034\001\035\001\036\001\
\037\001\255\255\039\001\255\255\041\001\001\001\002\001\003\001\
\255\255\255\255\047\001\007\001\255\255\009\001\255\255\011\001\
\012\001\255\255\001\001\002\001\003\001\255\255\255\255\255\255\
\007\001\021\001\009\001\255\255\011\001\025\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\020\001\021\001\255\255\
\255\255\255\255\025\001\039\001\040\001\001\001\002\001\003\001\
\255\255\045\001\255\255\007\001\008\001\009\001\255\255\011\001\
\039\001\040\001\255\255\255\255\255\255\255\255\045\001\255\255\
\255\255\021\001\001\001\002\001\003\001\025\001\255\255\255\255\
\007\001\255\255\009\001\255\255\011\001\012\001\255\255\255\255\
\255\255\255\255\255\255\039\001\040\001\255\255\021\001\255\255\
\255\255\045\001\025\001\003\001\004\001\005\001\255\255\007\001\
\255\255\009\001\255\255\011\001\255\255\255\255\014\001\255\255\
\039\001\040\001\255\255\255\255\255\255\255\255\045\001\255\255\
\024\001\255\255\001\001\002\001\003\001\255\255\255\255\031\001\
\007\001\255\255\009\001\255\255\011\001\255\255\255\255\039\001\
\255\255\041\001\255\255\001\001\002\001\003\001\021\001\047\001\
\255\255\007\001\025\001\009\001\255\255\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\039\001\040\001\255\255\025\001\255\255\255\255\045\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\039\001\040\001\255\255\007\001\255\255\009\001\045\001\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\255\255\025\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\039\001\040\001\255\255\255\255\
\255\255\255\255\045\001"

let yynames_const = "\
  SUB\000\
  ADD\000\
  OR\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  PRINT\000\
  EOF\000\
  COLON\000\
  COMMA\000\
  COLONASSIGN\000\
  REFASSIGN\000\
  ASSIGN\000\
  RETURN\000\
  STRUCT\000\
  THIS\000\
  DOT\000\
  IF\000\
  ELSE\000\
  IMPLEMENT\000\
  RIMPLEMENT\000\
  TRAIT\000\
  ARROW\000\
  MEMBER\000\
  FARROW\000\
  LT\000\
  GT\000\
  LE\000\
  GE\000\
  EQ\000\
  HAT\000\
  MUL\000\
  AMP\000\
  DIV\000\
  CAST\000\
  NEW\000\
  AT\000\
  DEF\000\
  CASE\000\
  MATCH\000\
  TYPE\000\
  ADDLIST\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  OPEN\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
     ( Ty _1 )
# 887 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 72 "parser.mly"
                ( TFun(_1, _3) )
# 895 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ2) in
    Obj.repr(
# 73 "parser.mly"
                         (
	let rec loop = function
	| TFun(a,b) -> TFun(a, loop b)
	| t -> TFun(t, _1)
	in loop _3
)
# 908 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typs) in
    Obj.repr(
# 79 "parser.mly"
                         (
	TGen(_1, _3)
)
# 918 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typs) in
    Obj.repr(
# 82 "parser.mly"
                     ( TTuple(_2))
# 925 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                ( TUnit )
# 931 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 86 "parser.mly"
      ( _1 )
# 938 "parser.ml"
               : 'typ2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ2) in
    Obj.repr(
# 87 "parser.mly"
           ( TFun(_1, _2))
# 946 "parser.ml"
               : 'typ2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 90 "parser.mly"
      ( [_1])
# 953 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typs) in
    Obj.repr(
# 91 "parser.mly"
                 ( _1 :: _3 )
# 961 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 94 "parser.mly"
      ( _1 )
# 968 "parser.ml"
               : 'exp1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 95 "parser.mly"
                ( _1 )
# 975 "parser.ml"
               : 'exp1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp1) in
    Obj.repr(
# 98 "parser.mly"
       ( [_1] )
# 982 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp1) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 99 "parser.mly"
                       ( _1 :: _2 )
# 990 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 103 "parser.mly"
                 ( (_1, _3) )
# 998 "parser.ml"
               : 'defrec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 104 "parser.mly"
                           ( (_1, _3) )
# 1006 "parser.ml"
               : 'defrec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defrec) in
    Obj.repr(
# 107 "parser.mly"
           ( [_1] )
# 1013 "parser.ml"
               : 'defrecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'defrec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'defrecs) in
    Obj.repr(
# 108 "parser.mly"
                              ( _1::_2 )
# 1021 "parser.ml"
               : 'defrecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp1) in
    Obj.repr(
# 111 "parser.mly"
                 ( (_1, _3) )
# 1029 "parser.ml"
               : 'record))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "parser.mly"
     ( (_1, EEmpty))
# 1036 "parser.ml"
               : 'record))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'record) in
    Obj.repr(
# 114 "parser.mly"
         ( [_1] )
# 1043 "parser.ml"
               : 'records))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'record) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'records) in
    Obj.repr(
# 115 "parser.mly"
                             ( _1::_2 )
# 1051 "parser.ml"
               : 'records))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 118 "parser.mly"
         ( (_1,_2) )
# 1059 "parser.ml"
               : 'variant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 119 "parser.mly"
     ( (_1,TEmpty) )
# 1066 "parser.ml"
               : 'variant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variant) in
    Obj.repr(
# 122 "parser.mly"
          ( [_1] )
# 1073 "parser.ml"
               : 'variants))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variant) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variants) in
    Obj.repr(
# 123 "parser.mly"
                      ( _1::_3 )
# 1081 "parser.ml"
               : 'variants))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'defrecs) in
    Obj.repr(
# 126 "parser.mly"
                                ( ETypeRec(_1, _4))
# 1089 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'variants) in
    Obj.repr(
# 127 "parser.mly"
                      ( ETypeVariant(_1, _4))
# 1097 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 128 "parser.mly"
          ( EPre("-", _2))
# 1104 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 129 "parser.mly"
          ( EPre("ref", _2))
# 1111 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 130 "parser.mly"
          ( EPre("!", _2))
# 1118 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 132 "parser.mly"
              ( EBin(_1, "+", _3) )
# 1126 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 133 "parser.mly"
              ( EBin(_1, "-", _3) )
# 1134 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 134 "parser.mly"
              ( EBin(_1, "*", _3) )
# 1142 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 135 "parser.mly"
              ( EBin(_1, "/", _3) )
# 1150 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 136 "parser.mly"
              ( EBin(_1, ".", _3) )
# 1158 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 137 "parser.mly"
             ( EBin(_1, "<", _3) )
# 1166 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 138 "parser.mly"
             ( EBin(_1, ">", _3) )
# 1174 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 139 "parser.mly"
             ( EBin(_1, "<=", _3) )
# 1182 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 140 "parser.mly"
             ( EBin(_1, ">=", _3) )
# 1190 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 141 "parser.mly"
             ( EBin(_1, "=", _3) )
# 1198 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 142 "parser.mly"
             ( EBin(_1, "lor", _3) )
# 1206 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 143 "parser.mly"
              ( EBin(_1, "^", _3) )
# 1214 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 144 "parser.mly"
                ( EBin(_1, ",", _3) )
# 1222 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 145 "parser.mly"
                  ( EBin(_1, "::", _3) )
# 1230 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 146 "parser.mly"
                 (
	match _1 with
	| EPre("!", a) -> EBin(a, ":=", _3)
	| _ -> EBin(_1, ":=", _3)
)
# 1242 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'fns) in
    Obj.repr(
# 151 "parser.mly"
                                   ( EMatch(_1, _5) )
# 1250 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 152 "parser.mly"
                                    ( EIf(_3,_5,_7) )
# 1259 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 153 "parser.mly"
                                      ( EIf(_3,_5,EEmpty) )
# 1267 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fn) in
    Obj.repr(
# 154 "parser.mly"
                   ( _2 )
# 1274 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fns) in
    Obj.repr(
# 155 "parser.mly"
                         ( EPFun(_3) )
# 1281 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    Obj.repr(
# 156 "parser.mly"
                     ( EBlock(_2) )
# 1288 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
                ( EList[])
# 1294 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    Obj.repr(
# 158 "parser.mly"
                     ( EList _2 )
# 1301 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 159 "parser.mly"
                ( EUnit )
# 1307 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 160 "parser.mly"
                    ( _2 )
# 1314 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'records) in
    Obj.repr(
# 161 "parser.mly"
                              ( ERecord(_3) )
# 1321 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fn) in
    Obj.repr(
# 162 "parser.mly"
                                  ( ECall(_1, [_3]) )
# 1329 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'fns) in
    Obj.repr(
# 163 "parser.mly"
                                        ( ECall(_1, [EPFun(_4)]) )
# 1337 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    Obj.repr(
# 164 "parser.mly"
                                    ( ECall(_1, [EBlock(_3)]) )
# 1345 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    Obj.repr(
# 165 "parser.mly"
                               ( ECall(_1, [EList[]]) )
# 1352 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    Obj.repr(
# 166 "parser.mly"
                                    ( ECall(_1, [EList _3]) )
# 1360 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    Obj.repr(
# 167 "parser.mly"
                                    ( ECall(_1, _3) )
# 1368 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    Obj.repr(
# 168 "parser.mly"
                               ( ECall(_1, [EUnit]) )
# 1375 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 170 "parser.mly"
                     ( ELet(_1, TEmpty, _3) )
# 1383 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 171 "parser.mly"
                      (
	let rec loop = function 
      | EVar(id),b -> ELet(id, TEmpty, b)
      | ECall((e:e), ls), b ->
      	let le = List.map begin fun (l:e) ->
      		e2e l
      	end ls in
      	loop(e, EFun(le, TEmpty, b))
      | _ -> assert false
	in
	loop(_1,_3)
)
# 1402 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 183 "parser.mly"
                           (
	let rec loop = function 
      | EVar(id),t,b -> ELet(id, t, b)
      | ECall((e:e), ls), (t:t), b ->

      	let (lt:t) = List.fold_left begin fun (t:t) (l:e)  ->
      		TFun(e2t l, t)
      	end (t:t) ls in
      	let le = List.map begin fun (l:e) ->
      		e2e l
      	end ls in
      	loop(e, lt, EFun(le, TEmpty, b))
      | _ -> assert false
	in
	loop(_1,_3,_5)
)
# 1426 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 199 "parser.mly"
                    (
	let rec loop = function 
      | EVar(id),b -> ELet(id, TEmpty, b)
      | ECall((e:e), ls), b ->
      	let le = List.map begin fun (l:e) ->
      		e2e l
      	end ls in
      	loop(e, EFun(le, TEmpty, b))
      | _ -> assert false
	in
	loop(_1,EPre("ref", _3))
)
# 1445 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 211 "parser.mly"
                (

	ELet(e2id _1, _3, EEmpty)
)
# 1456 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 215 "parser.mly"
      ( EInt(_1) )
# 1463 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 216 "parser.mly"
     ( EVar(_1) )
# 1470 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 217 "parser.mly"
         ( EString(_1) )
# 1477 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 218 "parser.mly"
                         ( ELetRec(_2, TEmpty, _4) )
# 1485 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 219 "parser.mly"
                          (
	let rec loop = function 
      | EVar(id),b -> ELetRec(id, TEmpty, b)
      | ECall((e:e), ls), b ->
      	let le = List.map begin fun (l:e) ->
      		e2e l
      	end ls in
      	loop(e, EFun(le, TEmpty, b))
      | _ -> assert false
	in
	loop(_2,_4)
)
# 1504 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 231 "parser.mly"
                               (
	let rec loop = function 
      | EVar(id),t,b -> ELetRec(id, t, b)
      | ECall((e:e), ls), (t:t), b ->

      	let (lt:t) = List.fold_left begin fun (t:t) (l:e)  ->
      		TFun(e2t l, t)
      	end (t:t) ls in
      	let le = List.map begin fun (l:e) ->
      		e2e l
      	end ls in
      	loop(e, lt, EFun(le, TEmpty, b))
      | _ -> assert false
	in
	loop(_2,_4,_6)
)
# 1528 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 247 "parser.mly"
                 ( ECall(_3, [_1]) )
# 1536 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 249 "parser.mly"
                  ( EFun(_1, TEmpty, EBlock(_3)) )
# 1544 "parser.ml"
               : 'fn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fn) in
    Obj.repr(
# 252 "parser.mly"
     ( [_1] )
# 1551 "parser.ml"
               : 'fns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fn) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fns) in
    Obj.repr(
# 253 "parser.mly"
              ( _1 :: _3 )
# 1559 "parser.ml"
               : 'fns))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 255 "parser.mly"
      ( SExp(_1) )
# 1566 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 256 "parser.mly"
                     ( SLet(_1, TEmpty, _3) )
# 1574 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 257 "parser.mly"
                         ( SLetRec(_2, TEmpty, _4) )
# 1582 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 258 "parser.mly"
       ( SOpen(_1) )
# 1589 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 260 "parser.mly"
       ( [_1] )
# 1596 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 261 "parser.mly"
             ( _1 :: _2 )
# 1604 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 264 "parser.mly"
        ( Prog _1 )
# 1611 "parser.ml"
               : Ast.prog))
; (fun __caml_parser_env ->
    Obj.repr(
# 267 "parser.mly"
    ( failwith
      (Printf.sprintf "parse error near characters %d-%d"
        (Parsing.symbol_start ())
        (Parsing.symbol_end ())) )
# 1620 "parser.ml"
               : Ast.prog))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.prog)
