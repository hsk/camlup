open Printf
open List

variable : int = 2
a := 1
b := 2
_ := 3

block : unit = begin
  printf("test 1\n")
end

block := begin
  printf("test 2\n")
  printf("test 2\n")
end

functions() := do

  printf("test")

end functions()

curry_function := begin

  f0:()=>int = {|| 0 }
  def f0():int 0 end
  def f0() 0 end

  printf("%d\n")(f0())
  printf("%d\n"; f0())
  printf("%d\n" f0())

  f1:(int)=>int= {|a| a }
  def f1(a:int):int a end
  def f1(a:int) a end

  printf("%d\n")(f1(1))
  printf("%d\n"; f1(1))
  printf("%d\n" f1(1))

  f2:int(int)(int)={|a b| a + b }
  f2(a:int):(int)=>int={|b| a + b }
  f2(a:int)(b:int):int={a + b}
  f2(a:int; b:int):int= a + b
  f2(a:int b:int):= a + b

  printf("%d\n")(f2(1)(2))
  printf("%d\n"; f2(1; 2))
  printf("%d\n" f2(1 2))

  f3:int(int int int)={|a b c| a + b + c }
  f3(a:int):int(int int)={|b c| a + b + c}
  f3(a:int)(b:int):int(int)={|c| a + b + c}
  f3(a:int)(b:int)(c:int):int={a + b + c}
  f3(a:int; b:int; c:int):int= a + b + c
  f3(a:int b:int c:int):= a + b + c

  printf("%d\n")(f3(1)(2)(3))
  printf("%d\n"; f3(1; 2; 3))
  printf("%d\n" f3(1 2 3))

  printf
    ("%d %d %d %d\n")
    (f0())
    (f1(1))
    (f2(1)(2))
    (f3(1)(2)(3))

  printf(
    "%d %d %d %d\n";
    f0();
    f1(1);
    f2(1; 2);
    f3(1; 2; 3)
  )

  printf(
    "%d %d %d %d\n"
    f0()
    f1(1)
    f2(1 2)
    f3(1 2 3)
  )

  printf("%d\n")(f3(-1)(-2)(-3))
  printf("%d\n"; f3(-1; -2; -3))
  printf("%d\n" f3(-1; -2; -3))

  printf("%d+%d=%d\n")(a)(b)(a+b)
  printf("%d+%d=%d\n"; a; b; a + b)
  printf("%d+%d=%d\n" a b a + b)
  
end

if_else() := do

  if a < 10 then printf("b1\n") end
  if a < 10 then printf("b2\n") end
  if a < 10 then printf("b2\n") printf("b3\n") end
  if a > 10 then printf("a\n") else printf("b3\n") end

  printf(if a < 1 then "a\n" else "b1\n" end)

end if_else()


def recursive_function()

  /* (let rec) */
  def fib:(int)=>int = { |n|
    if   n == 0 then 0
    elif n == 1 then 1
    else fib(n-2) + fib(n -1)
    end
  }

  /*
  def fib(n:int):int
    if   n == 0 then 0
    elif n == 1 then 1
    else fib(n-2) + fib(n-1))
    end
  end
  */

  printf("fib 10 %d\n" fib(10))  

end recursive_function()

def tuple()

  addt:(int,int)=>int={ |a,b|
    a + b
  }
  /*
  addt(int:a,int:b):int= a + b
  */

  /*
  f3:={
    (a,b,c) => a*b*c
  }
  */
  /*
  f3:(int,int,int)=>int={
    (a,b,c) => a*b*c
  }
  f3:int((int,int,int))={
    (a,b,c) => a*b*c
  }
  printf("%d" f3(1,2,3))
  */


  /*
  printf("%d\n" addt(1,2))

  ff2:(int,int)=>(int,int)=>int={
    a,b c,d => a*b + c*d
  }

  f2:int((int,int))((int,int))={
    a,b c,d => a*b + c*d
  }
  */
  /*
  f2:int((int,int);(int,int))={
    a,b c,d => a*b + c*d
  }
  */
  /*
  ff:int=>int,int=>int={
    a c,d => a + c*d
  }

  ff:int=>((int,int)=>int)={
    a c,d => a + c*d
  }

  ff:((int,int)=>int)(int)={
    a c,d => a + c*d
  }

  ff:int((int,int))(int)={
    a c,d => a + c*d
  }
  */
  /*
  ff:int(int int,int)={
    a c,d => a + c*d
  }
  */

  f2:(int,int)=>(int,int)=>int={
    a,b c,d => a*b + c*d
  }
  /*
  f2(a:int,b:int)(c:int,d:int):int={
    a*b + c*d
  }
  */
  printf("%d\n")(f2(1,2)(3,4))
  printf("%d\n" f2(1,2 3,4))

end tuple()

def pattern_match()

  def fib:(int)=>int={ n =>
    n match {
      case 0 => 0
      case 1 => 1
      case n => fib(n-2) + fib(n-1)
    }
  }

  /*
  def fib(n:int):int = {
    n match {
      case 0 => 0
      case 1 => 1
      case n => fib(n-2) + fib(n-1)
    }
  }
  */
end pattern_match()


def parcial_function()

  def fib:(int)=>int={
    case 0 => 0
    case 1 => 1
    case n => fib(n-2) + fib(n-1)
  }
  
  printf("fib 10 = %d\n" fib(10))

  /* tuple parcual function */

  llor:(int,int)=>int={
    case 0,0 => a:=1 b:=2; a | b
    case a,b => a | b
  }

  printf("llor %d\n" llor(1,2))
end parcial_function()

def list()

  iter({x => printf("%d\n")(x)})([1; 2; 3; 4])
  iter({x => printf("%d\n"; x)})([1; 2; 3; 4])
  iter({x => printf("%d\n" x)})([1; 2; 3; 4])
  iter({x => printf("%d\n" x)}; [1; 2; 3; 4])
  /* iter({x => printf("%d\n" x)} [1; 2; 3; 4])*/
  iter{x => printf("%d\n" x)}([1; 2; 3; 4])
  iter{x => printf("%d\n" x)}([1 2 3 4])
  iter{x => printf("%d\n" x)}[1 2 3 4];

  [1 2 3 4] -> iter {
    x => printf("%d\n" x)
  };

  [1 2 3 4] -> map {
    x => x * 10
  } -> iter {
    x => printf("%d\n" x)
  }

  /*
  def ps(xs):= {
    case [] => ()
    case x::xs => printf("%d\n" x) ps(xs)
  }
  ps(xs)
  */

end list ()


a type {x:int y:int}

def record()

  a :a= {:x=1 y=2}

  printf("%d\n" a.x)

  printf("%d\n"; {:x=1+2*3 y={a:=1 a}}.x)

  aa := {{:x}=>printf("%d\n" x)}
  
end record()


e type  | EUnit | EInt(int) | EAdd(e, e)

def variant()

  def eval:e=>int={
    case EUnit => 0
    case EInt(i) => i
    case EAdd(a, b) => eval(a) + eval(b)
  }

  printf("1+2=%d\n" eval(EAdd(EInt(1), EInt(2))))
end variant()

def reference()

  a := & 1;

  *a = 2;

  printf("%d\n"; *a);

  b #= 1;

  *b = 3;

  printf("%d\n"; *b);

end reference()

def closure()

  block(sp)(f):={
    printf("{\n")
    f(sp ^ "  ")
    printf("%s}\n" sp)
  }
  p := printf

  p("def %s() " "a") block(""){sp=>
    p("%sdef %s() " sp "b") block(sp){sp=>
      p("%sprogram2()\n" sp)
      p("%sprogram2()\n" sp)
    }
    p("%sprogram()\n" sp)
  }
  

  block(sp)(f):={
    printf("{\n")
    f(sp ^ "  ")
    printf("%s}\n" sp)
  }
  p := printf

  p("def %s() " "a") block(""){sp=>
    p("%sdef %s() " sp "b") block(sp){sp=>
      p("%sprogram2()\n" sp)
      p("%sprogram2()\n" sp)
    }
    p("%sprogram()\n" sp)
  }

end closure()

list_type := begin

  ls := [1 2 3]

  ls -> iter {
    l => printf("%d," l)
  } printf("\n")

  ls:list[int] = [1 2 3]
  
  ls -> iter {
    l => printf("%d," l)
  } printf("\n")

  ls:list[(int,int)] = [1,2 3,4]
  
  ls -> iter {
    (l,r) => printf("(%d,%d);" l r)
  } printf("\n")

  def f:={
    case [] => ()
    case x::xs => printf("%d,\n" x) f(xs)
  };

  f [1 2 3]

end
